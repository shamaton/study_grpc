// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mbox.proto

package mbox

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Message struct {
	From    string   `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	To      []string `protobuf:"bytes,2,rep,name=to" json:"to,omitempty"`
	Subject string   `protobuf:"bytes,3,opt,name=subject" json:"subject,omitempty"`
	// Types that are valid to be assigned to Body:
	//	*Message_Text
	//	*Message_Html
	Body                 isMessage_Body `protobuf_oneof:"body"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_mbox_af8e26a7e70d163e, []int{0}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (dst *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(dst, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

type isMessage_Body interface {
	isMessage_Body()
}

type Message_Text struct {
	Text string `protobuf:"bytes,4,opt,name=text,oneof"`
}
type Message_Html struct {
	Html string `protobuf:"bytes,5,opt,name=html,oneof"`
}

func (*Message_Text) isMessage_Body() {}
func (*Message_Html) isMessage_Body() {}

func (m *Message) GetBody() isMessage_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *Message) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *Message) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *Message) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *Message) GetText() string {
	if x, ok := m.GetBody().(*Message_Text); ok {
		return x.Text
	}
	return ""
}

func (m *Message) GetHtml() string {
	if x, ok := m.GetBody().(*Message_Html); ok {
		return x.Html
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Message) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Message_OneofMarshaler, _Message_OneofUnmarshaler, _Message_OneofSizer, []interface{}{
		(*Message_Text)(nil),
		(*Message_Html)(nil),
	}
}

func _Message_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Message)
	// body
	switch x := m.Body.(type) {
	case *Message_Text:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Text)
	case *Message_Html:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Html)
	case nil:
	default:
		return fmt.Errorf("Message.Body has unexpected type %T", x)
	}
	return nil
}

func _Message_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Message)
	switch tag {
	case 4: // body.text
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Body = &Message_Text{x}
		return true, err
	case 5: // body.html
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Body = &Message_Html{x}
		return true, err
	default:
		return false, nil
	}
}

func _Message_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Message)
	// body
	switch x := m.Body.(type) {
	case *Message_Text:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Text)))
		n += len(x.Text)
	case *Message_Html:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Html)))
		n += len(x.Html)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Result struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_mbox_af8e26a7e70d163e, []int{1}
}
func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (dst *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(dst, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

type Folder struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Folder) Reset()         { *m = Folder{} }
func (m *Folder) String() string { return proto.CompactTextString(m) }
func (*Folder) ProtoMessage()    {}
func (*Folder) Descriptor() ([]byte, []int) {
	return fileDescriptor_mbox_af8e26a7e70d163e, []int{2}
}
func (m *Folder) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Folder.Unmarshal(m, b)
}
func (m *Folder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Folder.Marshal(b, m, deterministic)
}
func (dst *Folder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Folder.Merge(dst, src)
}
func (m *Folder) XXX_Size() int {
	return xxx_messageInfo_Folder.Size(m)
}
func (m *Folder) XXX_DiscardUnknown() {
	xxx_messageInfo_Folder.DiscardUnknown(m)
}

var xxx_messageInfo_Folder proto.InternalMessageInfo

func (m *Folder) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*Message)(nil), "mbox.Message")
	proto.RegisterType((*Result)(nil), "mbox.Result")
	proto.RegisterType((*Folder)(nil), "mbox.Folder")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MailClient is the client API for Mail service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MailClient interface {
	// メールを送信する。
	Send(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Result, error)
	// 新着メールを受信する。
	Receive(ctx context.Context, in *Folder, opts ...grpc.CallOption) (Mail_ReceiveClient, error)
}

type mailClient struct {
	cc *grpc.ClientConn
}

func NewMailClient(cc *grpc.ClientConn) MailClient {
	return &mailClient{cc}
}

func (c *mailClient) Send(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/mbox.Mail/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailClient) Receive(ctx context.Context, in *Folder, opts ...grpc.CallOption) (Mail_ReceiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Mail_serviceDesc.Streams[0], "/mbox.Mail/Receive", opts...)
	if err != nil {
		return nil, err
	}
	x := &mailReceiveClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Mail_ReceiveClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type mailReceiveClient struct {
	grpc.ClientStream
}

func (x *mailReceiveClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MailServer is the server API for Mail service.
type MailServer interface {
	// メールを送信する。
	Send(context.Context, *Message) (*Result, error)
	// 新着メールを受信する。
	Receive(*Folder, Mail_ReceiveServer) error
}

func RegisterMailServer(s *grpc.Server, srv MailServer) {
	s.RegisterService(&_Mail_serviceDesc, srv)
}

func _Mail_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mbox.Mail/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailServer).Send(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mail_Receive_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Folder)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MailServer).Receive(m, &mailReceiveServer{stream})
}

type Mail_ReceiveServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type mailReceiveServer struct {
	grpc.ServerStream
}

func (x *mailReceiveServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

var _Mail_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mbox.Mail",
	HandlerType: (*MailServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _Mail_Send_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Receive",
			Handler:       _Mail_Receive_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "mbox.proto",
}

func init() { proto.RegisterFile("mbox.proto", fileDescriptor_mbox_af8e26a7e70d163e) }

var fileDescriptor_mbox_af8e26a7e70d163e = []byte{
	// 219 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0x31, 0x4f, 0xc3, 0x30,
	0x10, 0x85, 0x49, 0x6a, 0x1c, 0x7a, 0x02, 0x86, 0x13, 0x83, 0x55, 0x31, 0x54, 0x61, 0xc9, 0x54,
	0x21, 0xf8, 0x07, 0x0c, 0x88, 0xa5, 0x8b, 0x11, 0x3f, 0x20, 0x6e, 0x0e, 0x28, 0xb2, 0x7b, 0x28,
	0xbe, 0xa2, 0x20, 0xfe, 0x3c, 0xb2, 0x93, 0x0c, 0xdd, 0xde, 0xf7, 0xec, 0x7b, 0x7a, 0x77, 0x00,
	0xc1, 0xf1, 0xb0, 0xf9, 0xee, 0x59, 0x18, 0x55, 0xd2, 0xf5, 0x1f, 0x54, 0x5b, 0x8a, 0xb1, 0xfd,
	0x20, 0x44, 0x50, 0xef, 0x3d, 0x07, 0x53, 0xac, 0x8b, 0x66, 0x69, 0xb3, 0xc6, 0x6b, 0x28, 0x85,
	0x4d, 0xb9, 0x5e, 0x34, 0x4b, 0x5b, 0x0a, 0xa3, 0x81, 0x2a, 0x1e, 0xdd, 0x17, 0xed, 0xc4, 0x2c,
	0xf2, 0xb7, 0x19, 0xf1, 0x06, 0x94, 0xd0, 0x20, 0x46, 0x25, 0xfb, 0xe5, 0xcc, 0x66, 0x4a, 0xee,
	0xa7, 0x04, 0x6f, 0xce, 0x67, 0x37, 0xd1, 0x93, 0x06, 0xe5, 0xb8, 0xfb, 0xad, 0x2f, 0x40, 0x5b,
	0x8a, 0x47, 0x2f, 0xf5, 0x2d, 0xe8, 0x67, 0xf6, 0x1d, 0xf5, 0xa9, 0xc5, 0xa1, 0x0d, 0x34, 0xb7,
	0x48, 0xfa, 0xe1, 0x0d, 0xd4, 0xb6, 0xdd, 0x7b, 0xbc, 0x03, 0xf5, 0x4a, 0x87, 0x0e, 0xaf, 0x36,
	0x79, 0x8f, 0xa9, 0xf8, 0xea, 0x72, 0xc4, 0x31, 0x0a, 0x1b, 0xa8, 0x2c, 0xed, 0x68, 0xff, 0x43,
	0x38, 0x3d, 0x8c, 0xc9, 0xab, 0xd3, 0xa9, 0xfb, 0xc2, 0xe9, 0x7c, 0x88, 0xc7, 0xff, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x72, 0x91, 0xdf, 0x54, 0x16, 0x01, 0x00, 0x00,
}
